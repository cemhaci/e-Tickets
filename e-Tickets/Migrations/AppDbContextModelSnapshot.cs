// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_Tickets.Data;

#nullable disable

namespace e_Tickets.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("e_Tickets.Models.Actor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Bio = "This is the bio of the actor",
                            FullName = "Orlando Bloom",
                            ProfilePictureUrl = "https://www.hollywoodreporter.com/wp-content/uploads/2013/08/orlando_bloom_cannes_a_p.jpg?w=2000&h=1126&crop=1"
                        },
                        new
                        {
                            id = 2,
                            Bio = "This is the bio of the actor",
                            FullName = "Johnney Depp",
                            ProfilePictureUrl = "https://m.media-amazon.com/images/M/MV5BOTBhMTI1NDQtYmU4Mi00MjYyLTk5MjEtZjllMDkxOWY3ZGRhXkEyXkFqcGdeQXVyNzI1NzMxNzM@._V1_UY1200_CR92,0,630,1200_AL_.jpg"
                        },
                        new
                        {
                            id = 3,
                            Bio = "This is the bio of the actor",
                            FullName = "Mortensen Viggo",
                            ProfilePictureUrl = "http://images6.fanpop.com/image/photos/40800000/Viggo-Mortensen-viggo-mortensen-40837689-400-600.jpg"
                        },
                        new
                        {
                            id = 4,
                            Bio = "This is the bio of the actor",
                            FullName = "Tom Hanks",
                            ProfilePictureUrl = "https://media.bantmag.com/wp-content/uploads/t/tom-hanks-1040cs013013.jpg"
                        },
                        new
                        {
                            id = 5,
                            Bio = "This is the bio of the actor",
                            FullName = "Morgan Freeman",
                            ProfilePictureUrl = "http://images6.fanpop.com/image/photos/43400000/Morgan-Freeman-morgan-freeman-43437800-1024-768.png"
                        },
                        new
                        {
                            id = 6,
                            Bio = "This is the bio of the actor",
                            FullName = "Cem Yılmaz",
                            ProfilePictureUrl = "https://m.media-amazon.com/images/M/MV5BMTU5NzYxMDM3N15BMl5BanBnXkFtZTgwMDEzMTE4MTE@._V1_.jpg"
                        });
                });

            modelBuilder.Entity("e_Tickets.Models.Actor_Movie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Actors_Movies");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 6,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("e_Tickets.Models.Cinema", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Description = "this is description",
                            Name = "Cinema 1",
                            logo = "https://image.tmdb.org/t/p/w500/dXyIK3s8ZN7FH3AoaeyaBqX0eoJ.jpg"
                        },
                        new
                        {
                            id = 2,
                            Description = "this is description",
                            Name = "Cinema 2",
                            logo = "https://tr.web.img4.acsta.net/r_1280_720/medias/nmedia/18/35/14/33/18363640.jpg"
                        },
                        new
                        {
                            id = 3,
                            Description = "this is description",
                            Name = "Cinema 3",
                            logo = "https://www.4kfilmizlesene.xyz/wp-content/uploads/2020/12/Pirates-of-the-Caribbean-At-Worlds-End-2007.png"
                        },
                        new
                        {
                            id = 4,
                            Description = "this is description",
                            Name = "Cinema 4",
                            logo = "https://m.media-amazon.com/images/M/MV5BMTUxMzQyNjA5MF5BMl5BanBnXkFtZTYwOTU2NTY3._V1_.jpg"
                        },
                        new
                        {
                            id = 5,
                            Description = "this is description",
                            Name = "Cinema 5",
                            logo = "https://m.media-amazon.com/images/M/MV5BZjgxY2JkNjEtZmQ2NC00YWM4LWE5ZjEtYzg5MjY2Yjc5Y2ZmXkEyXkFqcGdeQXVyMjExNjgyMTc@._V1_.jpg"
                        });
                });

            modelBuilder.Entity("e_Tickets.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Movieid")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegesterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Movieid");

                    b.HasIndex("Userid");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("e_Tickets.Models.Like", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Movieid")
                        .HasColumnType("int");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Movieid");

                    b.HasIndex("Userid");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("e_Tickets.Models.Movie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CinemaId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            id = 1,
                            CinemaId = 5,
                            Description = "This is the Arog movie description",
                            EndDate = new DateTime(2023, 2, 4, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(838),
                            MovieCategory = 1,
                            Name = "AROG",
                            Price = 45.0,
                            StartDate = new DateTime(2023, 1, 28, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(822),
                            imageUrl = "https://m.media-amazon.com/images/M/MV5BZjgxY2JkNjEtZmQ2NC00YWM4LWE5ZjEtYzg5MjY2Yjc5Y2ZmXkEyXkFqcGdeQXVyMjExNjgyMTc@._V1_.jpg"
                        },
                        new
                        {
                            id = 2,
                            CinemaId = 3,
                            Description = "This is the Arog movie description",
                            EndDate = new DateTime(2023, 2, 1, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(845),
                            MovieCategory = 5,
                            Name = "PARİTES OF THE CERİBBEAN at World's End",
                            Price = 60.0,
                            StartDate = new DateTime(2023, 1, 28, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(844),
                            imageUrl = "https://www.4kfilmizlesene.xyz/wp-content/uploads/2020/12/Pirates-of-the-Caribbean-At-Worlds-End-2007.png"
                        },
                        new
                        {
                            id = 3,
                            CinemaId = 1,
                            Description = "This is the Arog movie description",
                            EndDate = new DateTime(2023, 1, 31, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(847),
                            MovieCategory = 2,
                            Name = "ESARETİN BEDELİ",
                            Price = 60.0,
                            StartDate = new DateTime(2023, 1, 28, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(846),
                            imageUrl = "https://image.tmdb.org/t/p/w500/dXyIK3s8ZN7FH3AoaeyaBqX0eoJ.jpg"
                        },
                        new
                        {
                            id = 4,
                            CinemaId = 4,
                            Description = "This is the Arog movie description",
                            EndDate = new DateTime(2023, 2, 7, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(849),
                            MovieCategory = 2,
                            Name = "THE GREEN MİLE",
                            Price = 60.0,
                            StartDate = new DateTime(2023, 1, 28, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(848),
                            imageUrl = "https://m.media-amazon.com/images/M/MV5BMTUxMzQyNjA5MF5BMl5BanBnXkFtZTYwOTU2NTY3._V1_.jpg"
                        },
                        new
                        {
                            id = 5,
                            CinemaId = 2,
                            Description = "This is the Arog movie description",
                            EndDate = new DateTime(2023, 2, 7, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(851),
                            MovieCategory = 4,
                            Name = "THE LORD OF THE RİNGS The Return Of The King",
                            Price = 60.0,
                            StartDate = new DateTime(2023, 1, 28, 18, 0, 3, 621, DateTimeKind.Local).AddTicks(850),
                            imageUrl = "https://moviesmedia.ign.com/movies/image/object/487/487665/lotr_the-return-of-the-king_poster.jpg?width=300"
                        });
                });

            modelBuilder.Entity("e_Tickets.Models.Movie_Producer", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Producerid")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "Producerid");

                    b.HasIndex("Producerid");

                    b.ToTable("movie_Producers");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            Producerid = 1
                        },
                        new
                        {
                            MovieId = 2,
                            Producerid = 2
                        },
                        new
                        {
                            MovieId = 3,
                            Producerid = 3
                        },
                        new
                        {
                            MovieId = 4,
                            Producerid = 7
                        },
                        new
                        {
                            MovieId = 4,
                            Producerid = 8
                        },
                        new
                        {
                            MovieId = 5,
                            Producerid = 4
                        },
                        new
                        {
                            MovieId = 5,
                            Producerid = 5
                        },
                        new
                        {
                            MovieId = 5,
                            Producerid = 6
                        });
                });

            modelBuilder.Entity("e_Tickets.Models.Producer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Bio = "This is the bio of the producer",
                            FullName = "Cem Yılmaz",
                            ProfilePictureUrl = "https://m.media-amazon.com/images/M/MV5BMTU5NzYxMDM3N15BMl5BanBnXkFtZTgwMDEzMTE4MTE@._V1_.jpg"
                        },
                        new
                        {
                            id = 2,
                            Bio = "This is the bio of the producer",
                            FullName = "Jerry Bruckheimer",
                            ProfilePictureUrl = "https://media-cldnry.s-nbcnews.com/image/upload/rockcms/2022-05/220517-jerry-bruckheimer-mjf-1443-094576.jpg"
                        },
                        new
                        {
                            id = 3,
                            Bio = "This is the bio of the producer",
                            FullName = "Niki Marvin",
                            ProfilePictureUrl = "https://images.mubicdn.net/images/cast_member/23718/cache-209048-1489646455/image-w856.jpg"
                        },
                        new
                        {
                            id = 4,
                            Bio = "This is the bio of the producer",
                            FullName = "Peter Jackson",
                            ProfilePictureUrl = "https://m.media-amazon.com/images/M/MV5BYjFjOThjMjgtYzM5ZS00Yjc0LTk5OTAtYWE4Y2IzMDYyZTI5XkEyXkFqcGdeQXVyMTMxMTIwMTE0._V1_QL75_UY207_CR74,0,140,207_.jpg"
                        },
                        new
                        {
                            id = 5,
                            Bio = "This is the bio of the producer",
                            FullName = "Fran Walsh",
                            ProfilePictureUrl = "https://static.wikia.nocookie.net/lotr/images/5/58/Fran_Walsh.jpg/revision/latest?cb=20070425223838"
                        },
                        new
                        {
                            id = 6,
                            Bio = "This is the bio of the producer",
                            FullName = "Barrie M. Osborne",
                            ProfilePictureUrl = "https://crewlist.s3.amazonaws.com/images/profile/full/1519507379454710.jpg"
                        },
                        new
                        {
                            id = 7,
                            Bio = "This is the bio of the producer",
                            FullName = "Frank Darabont",
                            ProfilePictureUrl = "https://www.hollywoodreporter.com/wp-content/uploads/2014/06/frank_darabont.jpg"
                        },
                        new
                        {
                            id = 8,
                            Bio = "This is the bio of the producer",
                            FullName = "David Valdes",
                            ProfilePictureUrl = "https://pbs.twimg.com/profile_images/1475815608906391554/vYs2cEB6_400x400.jpg"
                        },
                        new
                        {
                            id = 9,
                            Bio = "This is the bio of the producer",
                            FullName = "David Valdes",
                            ProfilePictureUrl = "https://pbs.twimg.com/profile_images/1475815608906391554/vYs2cEB6_400x400.jpg"
                        });
                });

            modelBuilder.Entity("e_Tickets.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activate")
                        .HasColumnType("bit");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfileImageFile")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("e_Tickets.Models.Actor_Movie", b =>
                {
                    b.HasOne("e_Tickets.Models.Actor", "Actor")
                        .WithMany("Actor_Movie")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_Tickets.Models.Movie", "Movie")
                        .WithMany("Actor_Movies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("e_Tickets.Models.Comment", b =>
                {
                    b.HasOne("e_Tickets.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movieid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_Tickets.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_Tickets.Models.Like", b =>
                {
                    b.HasOne("e_Tickets.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Movieid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_Tickets.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_Tickets.Models.Movie", b =>
                {
                    b.HasOne("e_Tickets.Models.Cinema", "Cinema")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("e_Tickets.Models.Movie_Producer", b =>
                {
                    b.HasOne("e_Tickets.Models.Movie", "Movie")
                        .WithMany("movie_Producers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_Tickets.Models.Producer", "producer")
                        .WithMany("Movie_Producers")
                        .HasForeignKey("Producerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("producer");
                });

            modelBuilder.Entity("e_Tickets.Models.Actor", b =>
                {
                    b.Navigation("Actor_Movie");
                });

            modelBuilder.Entity("e_Tickets.Models.Cinema", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("e_Tickets.Models.Movie", b =>
                {
                    b.Navigation("Actor_Movies");

                    b.Navigation("movie_Producers");
                });

            modelBuilder.Entity("e_Tickets.Models.Producer", b =>
                {
                    b.Navigation("Movie_Producers");
                });
#pragma warning restore 612, 618
        }
    }
}
